perc_train <- 0.7 # 70% to train and 30% to test
split_point <- round(nrow(synt3)*perc_train)
list_methods_to_test <- c("rpart", #Recursive Partitioning And Regression Tree
"naive_bayes",#Naive Bayes
"nnet", #Neural Network
"xgbTree") #eXtreme Gradient Boosting
set.seed(42)
fitControl <- trainControl(method = "cv",
number = 11,
classProbs = T,
summaryFunction = multiClassSummary
)
formule <- as.formula(
paste("action_app_action",
Reduce(f = function(x,y)paste(x,y,sep=" + "),
x = names(synt3)[!names(synt3) %in% c("action_app_action","action_app_id")]),
sep=" ~ ")
)
models <- lapply(list_methods_to_test, function (x){
print(x)
train(form = formule,
data = synt3[1:split_point],
trControl = fitControl,
method = x)
}
)
install.packages("MLmetrics")
list_methods_to_test <- c("rpart", #Recursive Partitioning And Regression Tree
"naive_bayes",#Naive Bayes
"nnet", #Neural Network
"xgbTree") #eXtreme Gradient Boosting
set.seed(42)
fitControl <- trainControl(method = "cv",
number = 11,
classProbs = T,
summaryFunction = multiClassSummary
)
formule <- as.formula(
paste("action_app_action",
Reduce(f = function(x,y)paste(x,y,sep=" + "),
x = names(synt3)[!names(synt3) %in% c("action_app_action","action_app_id")]),
sep=" ~ ")
)
models <- lapply(list_methods_to_test, function (x){
print(x)
train(form = formule,
data = synt3[1:split_point],
trControl = fitControl,
method = x)
}
)
models
synt2[,CheckNextEvent := action_day_of_week == shift(action_day_of_week) & action_day_hour == shift(action_day_hour),
][,EventOrdered := fifelse((action_day_hour > shift(action_day_hour) & CheckNextEvent == FALSE) | (action_day_hour < shift(action_day_hour) & CheckNextEvent == FALSE & action_day_of_week != shift(action_day_of_week)),
"Ok","NOk")]
synt2[CheckNextEvent == F,.N,by=EventOrdered]
synt2[,.(action_day_of_week,action_day_hour,CheckNextEvent)]
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(PST)
library(readxl)
library(lubridate)
library(ggplot2)
read_excel("DeParaEvento.xlsx")
read_excel("DeParaEvento.xlsx")
```{r}
df <- fread("sa.csv",sep = ";", colClasses = list(character = "generation_timestamp"))
df[ , generation_timestamp := as.POSIXct(generation_timestamp),
][,`:=`(Day = day(generation_timestamp),
Month = month(generation_timestamp),
WeekDay = wday(generation_timestamp)),
][,WeekEnd := fifelse(WeekDay == 7 || WeekDay == 1, T,F),
][,WeekDay := factor(WeekDay,ordered = T)]
df_deviceid <- df[,.N,by=deviceid]
df_deviceid[,id := 1:length(df_deviceid$N),][,id := factor(id)]
df <- merge.data.table(df,df_deviceid[,.(deviceid,id)],by = "deviceid",all = T)
page <- data.table(Code = c("spl","spy","call","glr","phn","clk","sps","msg","cmr","not","rnr"),
App = c("Calendar","Samsung Pay","Call","Gallery","Contacts&Phones","Clock","Samsung Pass","Message","Camera","Samsung Notes","Reminder"))
df <- merge.data.table(df,page,
by.x = "type",
by.y = "Code",
all.x = T)
df[,.N,by = Code]
page
df[,.N,by = App]
df[,.N,by = App][order(N)]
clipr::write_clp(df[,.N,by = App][order(N)])
clipr::write_clip(df[,.N,by = App][order(N)])
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(PST)
library(readxl)
library(lubridate)
library(ggplot2)
page <- data.table(Code = c("spl","spy","call","glr","phn","clk","sps","msg","cmr","not","rnr"),
App = c("Calendar","Samsung Pay","Call","Gallery","Contacts&Phones","Clock","Samsung Pass","Message","Camera","Samsung Notes","Reminder"))
page
devtools::install_github("onnx/onnx-r")
install.packages("devtools")
install.packages("devtools")
library(CART)
library(data.table)
y = data.table(resp = c("S","S","S","S","S","S","S","S","T","T","T","T","T","T","T","T","T","T","T","T","T","T"))
X = data.table(Dia = c("S","S","S","S","S","S","S","S","T","T","T","T","T","T","T","Q","Q","Q","Q","Q","Q","Q"))
library(CART)
install.packages('CART')
library(tree)
X = data.table(Dia = c("S","S","S","S","S","S","S","S","T","T","T","T","T","T","T","Q","Q","Q","Q","Q","Q","Q"),
resp = c("S","S","S","S","S","S","S","S","T","T","T","T","T","T","T","T","T","T","T","T","T","T"))
tree(data = X, formula = resp ~ Dia)
model = tree(data = X, formula = resp ~ Dia)
model
print(model)
predict(model,"S")
predict(model,data.table(Dia = c("S")))
X = data.table(Dia = c("S","S","S","S","S","S","S","S","T","T","T","T","T","T","T","Q","Q","Q","Q","Q","Q","Q"),
resp = c(1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
model = tree(data = X, formula = resp ~ Dia)
model
predict(model,data.table(Dia = c("S")))
X
str(X)
X[,Dia := as.factor(Dia)]
str(X)
model = tree(data = X, formula = resp ~ Dia)
model
predict(model,data.table(Dia = c("S")))
predict(model,data.table(Dia = as.factor(c("S"))))
X[,Dia := as.factor(Dia),
][, resp := as.factor(resp)]
X = data.table(Dia = c("S","S","S","S","S","S","S","S","T","T","T","T","T","T","T","Q","Q","Q","Q","Q","Q","Q"),
resp = c("S","S","S","S","S","S","S","S","T","T","T","T","T","T","T","T","T","T","T","T","T","T"))
X[,Dia := as.factor(Dia),
][, resp := as.factor(resp)]
model = tree(data = X, formula = resp ~ Dia)
model
predict(model,data.table(Dia = as.factor(c("S"))))
print(model)
plot(model)
plot(model)
library(data.table)
library(clipr)
data = clipr::read_clip_tbl()
data
str(data)
library(tree)
model = tree(data = data, formula = feedback_type~action_day_of_week )
model
library(rpart)
library(rpart.plot)
model = rpart(data = data, formula = feedback_type~action_day_of_week )
rpart.plot::rpart.plot(model)
dados2 = data.table(input = c("a","a","b","b","b"), output = c(1,1,1,0,0))
model2 = rpart(data = dados2, formula = output ~ input )
rpart.plot::rpart.plot(model2)
library(randomForest)
library(rpart)
library(rpart.plot)
library(randomForest)
data <- clipr::read_clip_tbl()
data
data <- clipr::read_clip_tbl()
data <- clipr::read_clip_tbl()
str(data)
?randomForest()
data <- as.data.table(data)
library(data.table)
data <- as.data.table(data)
data[,-c("feedback_type")
data[,-c("feedback_type")]
data[,-c("feedback_type")]
randomForest(x = data[,-c("feedback_type")],
y = data[,c("feedback_type")])
data[,c("feedback_type")]
data[,feedback_type:= as.factor(feedback_type)]
randomForest(x = data[,-c("feedback_type")],
y = data[,c("feedback_type")],
)
randomForest(formula = feedback_type ~ .)
randomForest(data = data, formula = feedback_type ~ .)
randomForest(x = data[,-c("feedback_type")],
y = data[,c("feedback_type")])
data[,c("feedback_type")]
data[,-c("feedback_type")]
dim(data[,-c("feedback_type")])
dim(data)
dim(data[,feedback_type])
dim(data$feedback_type)
dim(data[,c("feedback_type")])
randomForest(x = data[,-c("feedback_type")],
y = data[,c("feedback_type")])
randomForest(x = data[,-c("feedback_type")],
y = data$feedback_type)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(data.table)
library(readxl)
library(ggplot2)
library(data.table)
library(readxl)
library(ggplot2)
## Carregando os dataset
```{r Dados}
dados_banco <- as.data.table(read_excel("./dados_Lista_aula_12/Banco.xlsx"))
dados_coleterol <- as.data.table(read_excel("./dados_Lista_aula_12/Colesterol.xlsx"))
dados_dieta <- as.data.table(read_excel("./dados_Lista_aula_12/Dieta.xlsx"))
dados_hospitais <- as.data.table(read_excel("./dados_Lista_aula_12/Hospitais.xlsx"))
perm_fun <- function(x, nA, nB)
{
n <- nA + nB
idx_b <- sample(1:n, nB)
idx_a <- setdiff(1:n, idx_b)
mean_diff <- mean(x[idx_b]) - mean(x[idx_a])
return(mean_diff)
}
#Criando uma tabela com 2 colunas, para cada Hospital
dados_hospital2 <- as.data.table(
cbind(Hospital_1 = dados_hospitais[Hospital == "Hospital_1",Tempo_Atendimento],
Hospital_2 = dados_hospitais[Hospital == "Hospital_2",Tempo_Atendimento])
)
perm_fun <- function(x, nA, nB)
{
n <- nA + nB
idx_b <- sample(1:n, nB)
idx_a <- setdiff(1:n, idx_b)
mean_diff <- mean(x[idx_b]) - mean(x[idx_a])
return(mean_diff)
}
dados_hospital2
dados_hospitais
dados_hospitais
dados_hospitais[,.N,by=Hospital]
?rep
?sapply
p <- sapply(1:10000,function(x){perm_fun(dados_hospitais$Tempo_Atendimento,20,20)})
p
hist(p)
#Criando uma tabela com 2 colunas, para cada Hospital
dados_hospital2 <- as.data.table(
cbind(Hospital_1 = dados_hospitais[Hospital == "Hospital_1",Tempo_Atendimento],
Hospital_2 = dados_hospitais[Hospital == "Hospital_2",Tempo_Atendimento])
)
```{r Questao1}
#Criando uma tabela com 2 colunas, para cada Hospital
dados_hospital2 <- as.data.table(
cbind(Hospital_1 = dados_hospitais[Hospital == "Hospital_1",Tempo_Atendimento],
Hospital_2 = dados_hospitais[Hospital == "Hospital_2",Tempo_Atendimento])
)
shapiro.test(dados_hospitais$Tempo_Atendimento)
# Pelo teste de Shapiro, como o valor é maior que 5%, não conseguimos rejeitar a hipótese nula, portanto iremos assumir que os dados seguem uma distribuição normal
t.test(x = dados_hospital2$Hospital_1,
y = dados_hospital2$Hospital_2,
alternative = "two.sided",
paired = F)
#Com o valor p menor que o nível de significancia de 1%, podemos dizer que há diferença entre os tempos de espera médios entre os hospitais
ggplot(dados_hospitais)+geom_boxplot(mapping = aes(x = Hospital, y = Tempo_Atendimento))
dados_hospitais
dados_hospitais[,Mean = mean(Tempo_Atendimento), by = Hospital]
dados_hospitais[,Mean := mean(Tempo_Atendimento), by = Hospital]
dados_hospitais[,mean(Tempo_Atendimento), by = Hospital]
dados_hospitais[,"Media" = mean(Tempo_Atendimento), by = Hospital]
dados_hospitais[,Media = .(mean(Tempo_Atendimento)), by = Hospital]
dados_hospitais[,Media = c(mean(Tempo_Atendimento)), by = Hospital]
dados_hospitais[,c("Media") = mean(Tempo_Atendimento), by = Hospital]
dados_hospitais[,.(Media = mean(Tempo_Atendimento)), by = Hospital]
dados_hospitais[,.(Media = mean(Tempo_Atendimento)), by = Hospital]$Media
a <- dados_hospitais[,.(Media = mean(Tempo_Atendimento)), by = Hospital]$Media
a[1] - a[2]
p > 23
mean(p > 23)
library(data.table)
library(data.tree)
library(readxl)
cargo <- read_xlsx("../data/raw/EmployeeChurnData_cargoxdpto.xlsx")
cargo <- as.data.table(cargo)
names(cargo) <- c("ano","cod_func","gestor","banda","posicao","dep")
ultimo_cargo = cargo[ano == 2021]
ultimo_cargo[,gestor := fifelse(gestor == cod_func, -1, gestor)]
ultimo_cargo[,pathString := paste(gestor,cod_func,sep = "/")]
ultimo_cargo[gestor == 388]
ultimo_cargo
ultimo_cargo[gestor == 517]
ultimo_cargo[cod_func == 517]
ultimo_cargo[cod_func == 399]
ultimo_cargo[cod_func == 192]
ultimo_cargo[cod_func == 1 | cod_func == 53 |
cod_func == 399 | cod_func == 192 | cod_func == 380]
FromDataFrameTable(ultimo_cargo[cod_func == 1 | cod_func == 53 |
cod_func == 399 | cod_func == 192 | cod_func == 380])
plot(FromDataFrameTable(ultimo_cargo[cod_func == 1 | cod_func == 53 |
cod_func == 399 | cod_func == 192 | cod_func == 380]))
ultimo_cargo[cod_func == 1 | cod_func == 53 |
cod_func == 399 | cod_func == 192 | cod_func == 380]
ultimo_cargo = cargo[ano == 2021]
ultimo_cargo[,gestor := fifelse(gestor == cod_func, -1, gestor)]
ultimo_cargo[,pathString := paste(cod_func,gestor,sep = "/")]
plot(FromDataFrameTable(ultimo_cargo[cod_func == 1 | cod_func == 53 |
cod_func == 399 | cod_func == 192 | cod_func == 380]))
ultimo_cargo = cargo[ano == 2021]
ultimo_cargo[,gestor := fifelse(gestor == cod_func, -1, gestor)]
ultimo_cargo[,pathString := paste(gestor,cod_func,sep = "/")]
plot(FromDataFrameTable(ultimo_cargo[cod_func == 1 | cod_func == 53 |
cod_func == 399 | cod_func == 192 | cod_func == 380]))
ultimo_cargo[cod_func == 517]
ultimo_cargo[cod_func == 192]
ultimo_cargo[cod_func == 1 | cod_func == 53 |
cod_func == 399 | cod_func == 192 | cod_func == 380]
ultimo_cargo[cod_func == 517]
plot(FromDataFrameTable(ultimo_cargo[cod_func == 1 | cod_func == 53 |
cod_func == 399 | cod_func == 192 | cod_func == 380 | cod_func == 517]))
ex
ex <- ultimo_cargo[cod_func == 1 | cod_func == 53 |
cod_func == 399 | cod_func == 192 | cod_func == 380 | cod_func == 517]
plot(FromDataFrameTable(ex))
ex
library(car)
library(data.table)
# data(Prestige)
setwd("D:\\ohbto\\Documents\\MBA_CienciaDados\\Covid-19_tests_on_database\\src\\r")
# data(Prestige)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
test <- function(df,form){
print(boxTidwell(formula = as.formula(form),data = df))
}
a<-fread("teste.csv")
a
boxTidwell(formula = as.formula("obito_pre~*"),data=a)
boxTidwell(formula = as.formula("obito_pre ~ pneumopatia_pre"),data=a)
data(Prestige)
Prestige
a
a[,obito_pre := obito_pre + 1]
a
boxTidwell(obito_pre ~  pneumopatia_pre,data = a)
a[,pneumopatia_pre := pneumopatia_pre + 1]
boxTidwell(obito_pre ~  pneumopatia_pre,data = a)
a<-fread("teste.csv")
boxTidwell(obito_pre ~  pneumopatia_pre,data = a)
a[,pneumopatia_pre := pneumopatia_pre + 0.001]
boxTidwell(obito_pre ~  pneumopatia_pre,data = a)
a[,pneumopatia_pre := pneumopatia_pre - 0.001]
a[,pneumopatia_pre := pneumopatia_pre + 1]
boxTidwell(obito_pre ~  pneumopatia_pre,data = a)
a[,asma_pre := asma_pre + 1]
boxTidwell(obito_pre ~  asma_pre + pneumopatia_pre,data = a)
boxTidwell(obito_pre ~  asma_pre + pneumopatia_pre,data = a)
boxTidwell(obito_pre ~  idade_pre ,data = a)
a[,obito_pre := obito_pre +1]
boxTidwell(obito_pre ~  idade_pre ,data = a)
summary(a)
a<-fread("teste.csv")
a
boxTidwell(obito_pre ~  idade_pre ,data = a)
summary(a)
a[,idade_pre := idade_pre +1]
boxTidwell(obito_pre ~  idade_pre ,data = a)
?boxTidwell
install.packages("rms")
install.packages("Hmisc")
library(Hmisc)
libray(rms)
library(rms)
datadist(a)
datadist(a)
?datadist
?lm()
?glm()
devtools::install_github("apache/arrow/r")
install.packages("arrow")
library(data.table)
library(arrow)
read_parquet("../data/interim/comorbidade_simples.parquet")
read_parquet("../../data/interim/comorbidade_simples.parquet")
df_comor_simples <- as.data.table(read_parquet("../../data/interim/comorbidade_simples.parquet"))
comorbidades_regressao <- as.data.table(read_parquet("../data/interim/comorbidades_regressao.parquet"))
comorbidades_regressao <- as.data.table(read_parquet("../../data/interim/comorbidades_regressao.parquet"))
df_comor_simples <- as.data.table(read_parquet("../../data/interim/comorbidade_simples.parquet"))
?glm
glm(formula = obito_pre ~ *, family = "logit")
glm(formula = obito_pre ~ ., family = "logit")
glm(formula = obito_pre ~ ., family = binomial)
glm(formula = obito_pre ~ ., family = 'binomial')
glm(formula = obito_pre ~ ., family = 'binomial',data = df_comor_simples)
glm(formula = obito_pre ~ ., family = 'logit',data = df_comor_simples)
log_reg <- glm(formula = obito_pre ~ ., family = 'binomial',data = df_comor_simples)
summary(log_reg)
summary(log_reg)
comorbidades_regressao <- as.data.table(read_parquet("../../data/interim/comorbidades_regressao.parquet"))
comorbidade_regressao_simples <- as.data.table(read_parquet("../../data/interim/comorbidades_regressao_nao_duplicatas_simples.parquet"))
df_comor_simples <- as.data.table(read_parquet("../../data/interim/comorbidade_simples.parquet"))
summary(comorbidade_regressao_simples)
str(comorbidade_regressao_simples)
library(data.table)
library(arrow)
library(explore)
describe(comorbidade_regressao_simples)
describe(comorbidade_regressao_simples)
as.data.table(describe(comorbidade_regressao_simples))
as.data.table(describe(comorbidade_regressao_simples))[,type == "chr"]
as.data.table(describe(comorbidade_regressao_simples))[type == "chr",]
as.data.table(describe(comorbidade_regressao_simples))[type == "chr",]$variable
comorbidade_regressao_simples[,lapply(colunas_factor,
function(x){
as.factor(x)
})]
colunas_factor <- as.data.table(describe(comorbidade_regressao_simples))[type == "chr",]$variable
comorbidade_regressao_simples[,lapply(colunas_factor,
function(x){
as.factor(x)
})]
comorbidade_regressao_simples[,(cols) := lapply(.SD,
function(x){
as.factor(x)
}),
.SDCols = colunas_factor]
comorbidade_regressao_simples[,(colunas_factor) := lapply(.SD,
function(x){
as.factor(x)
}),
.SDCols = colunas_factor]
comorbidade_regressao_simples[,(colunas_factor) := lapply(.SD,
function(x){
as.factor(x)
}),
.SDcols = colunas_factor]
describe(comorbidade_regressao_simples)
comorbidade_regressao_simples[,(colunas_factor) := lapply(.SD,
function(x){
as.factor(x)
}),
.SDcols = colunas_factor,
][,-c("__index_level_0__")]
comorbidade_regressao_simples[,(colunas_factor) := lapply(.SD,
function(x){
as.factor(x)
}),
.SDcols = colunas_factor,
][,__index_level_0__ := NULL]
comorbidade_regressao_simples[,(colunas_factor) := lapply(.SD,
function(x){
as.factor(x)
}),
.SDcols = colunas_factor,
][,c("__index_level_0__") := NULL]
describe(comorbidade_regressao_simples)
scale(comorbidade_regressao_simples$idade_pre)
?scale
ss <- scale(comorbidade_regressao_simples$idade_pre)
ss[[]]
ss
attr(ss)
ss[1]
ss[-1]
ss[-11]
attributes(ss)
attributes(ss)$`scaled:center`
comorbidade_regressao_simples$idade_pre <- ss
log_reg <- glm(formula = obito_pre ~ ., family = 'binomial',data = comorbidade_regressao_simples)
summary(log_reg)
library(car)
residualPlots(log_reg)
log_reg <- glm(formula = obito_pre ~ . + I(idade_pre^2), family = 'binomial',data = comorbidade_regressao_simples)
log_reg2 <- glm(formula = obito_pre ~ . + I(idade_pre^2), family = 'binomial',data = comorbidade_regressao_simples)
log_reg <- glm(formula = obito_pre ~ ., family = 'binomial',data = comorbidade_regressao_simples)
log_reg <- glm(formula = obito_pre ~ ., family = 'binomial',data = comorbidade_regressao_simples)
summary(log_reg)
log_reg2 <- glm(formula = obito_pre ~ . + I(idade_pre^2), family = 'binomial',data = comorbidade_regressao_simples)
summary(log_reg2)
residualPlots(log_reg2)
residualPlots(log_reg2)
residualPlots(log_reg)
log_reg3 <- glm(formula = obito_pre ~ . + I(idade_pre^2) + + I(idade_pre^4),
family = 'binomial',
data = comorbidade_regressao_simples)
residualPlots(log_reg3)
residualPlots(log_reg3)
log_reg3 <- glm(formula = obito_pre ~ . + I(idade_pre^2) +  I(idade_pre^4) +I(idade_pre^8),
family = 'binomial',
data = comorbidade_regressao_simples)
residualPlots(log_reg3)
log_reg3 <- glm(formula = obito_pre ~ . + I(idade_pre^2) +  I(idade_pre^4) +I(idade_pre^16),
family = 'binomial',
data = comorbidade_regressao_simples)
residualPlots(log_reg3)
marginalModelPlots(log_reg)
influenceIndexPlot(log_reg,id.n = 3)
influencePlot(log_reg,col='red',id.n=3)
outlierTest(log_reg)
comorbidade_regressao_simples
comorbidade_regressao_simples[1]
comorbidade_regressao_simples[25668]
influenceIndexPlot(log_reg,id.n = 3)
comorbidade_regressao_simples[16946]
comorbidade_regressao_simples[16946,]
comorbidade_regressao_simples[16944:16946,]
comorbidade_regressao_simples[16946,]
describe(comorbidade_regressao_simples)
leg_reg_modif <- update(leg_reg,subset = c(-25668))
leg_reg_modif <- update(log_reg,subset = c(-25668))
compareCoefs(log_reg,leg_reg_modif)
residualPlots(leg_reg_modif)
ll <- glm(formula = obito_pre ~ . + I(idade_pre^2),
family = "binomial",
data = comorbidade_regressao_simples, subset = c(-25668))
residualPlots(ll)
ll <- glm(formula = obito_pre ~ . + I(idade_pre^4),
family = "binomial",
data = comorbidade_regressao_simples, subset = c(-25668))
residualPlots(ll)
influenceIndexPlot(log_reg,id.n = 3)
comorbidade_regressao_simples[25668,]
comorbidade_regressao_simples[25668,]
